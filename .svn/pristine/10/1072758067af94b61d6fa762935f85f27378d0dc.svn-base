package kolekce;

import java.util.Iterator;
import kolekce.interfaces.AbstrTableInterface;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author user
 */
public class AbstrTableTest {

    private static AbstrTableInterface table;

    public AbstrTableTest() {
    }

    @BeforeClass
    public static void setUpClass() {

    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
        table = new AbstrTable();
    }

    @After
    public void tearDown() {
    }

    private static void assertExpected(String testName, Object[] expected) {

        Iterator iterator = table.vytvorIterator(eTypProhl.SIRKA);

        System.out.println(testName);
        System.out.println("===========================");
        System.out.print("Expected:\t");
        for (Object object : expected) {
            System.out.print(object + " ");
        }
        System.out.println("");

        System.out.print("Given:\t\t");
        for (Object object : expected) {
            Object given = iterator.next();
            System.out.print(given + " ");
            assertEquals(object, given);
        }
        System.out.println("");
        System.out.println("---------------------------");

    }

    /**
     * Test of zrus method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     */
    @Test
    public void testZrus() throws KolekceException {
        table.vloz("A", "A1");
        assertFalse(table.jePrazdny());
        table.zrus();
        assertTrue(table.jePrazdny());
    }

    /**
     * Test of jePrazdny method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     */
    @Test
    public void testJePrazdny() throws KolekceException {
        assertTrue(table.jePrazdny());

        table.vloz("A", "A1");
        assertFalse(table.jePrazdny());

        table.odeber("A");
        assertTrue(table.jePrazdny());

        table.vloz("A", "A1");
        table.zrus();
        assertTrue(table.jePrazdny());

    }

    /**
     * Test of najdi method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     */
    @Test
    public void testNajdi() throws KolekceException {
        table.vloz("A", "A1");
        table.vloz("B", "A2");
        table.vloz("C", "A3");
        table.vloz("D", "A4");

        assertEquals("A1", table.najdi("A"));
        assertEquals("A4", table.najdi("D"));
        assertEquals("A2", table.najdi("B"));
        assertEquals("A3", table.najdi("C"));

    }

    /**
     * Test of vloz method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     *
     * C
     * A F
     * B D
     * E
     */
    @Test
    public void testVloz() throws KolekceException {

        table.vloz("C", "C1");
        table.vloz("F", "F1");
        table.vloz("D", "D1");
        table.vloz("E", "E1");
        table.vloz("A", "A1");
        table.vloz("B", "B1");

        assertExpected(getClass().getName(),
                new String[]{"C1", "A1", "F1", "B1", "D1", "E1"});
    }

    @Test(expected = KolekceException.class)
    public void testVloz_Exception01() throws KolekceException {
        table.vloz(null, null);
        fail();
    }

    @Test(expected = KolekceException.class)
    public void testVloz_Exception02() throws KolekceException {
        table.vloz(null, "C");
        fail();
    }

    @Test(expected = KolekceException.class)
    public void testVloz_Exception03() throws KolekceException {
        table.vloz("C", null);
        fail();
    }

    /**
     * Test of odeber method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     *
     * C
     * A F
     * B D
     * E
     */
    @Test
    public void testOdeber_01() throws KolekceException {
        String className = getClass().getName();
        table.vloz("C", "C1");
        table.vloz("F", "F1");
        table.vloz("D", "D1");
        table.vloz("E", "E1");
        table.vloz("A", "A1");
        table.vloz("B", "B1");

        table.odeber("C");
        assertExpected(className, new String[]{
            "D1", "A1", "F1", "B1", "E1"
        }); //root

        table.odeber("E");
        assertExpected(className, new String[]{
            "D1", "A1", "F1", "B1"
        });

        table.odeber("F");
        assertExpected(className, new String[]{
            "D1", "A1", "B1"
        });
    }
    
    @Test
    public void testOdeber_02() throws KolekceException {
        String className = getClass().getName();
        
        table.vloz("A", "A1");
        table.vloz("B", "B1");
        table.vloz("C", "C1");
        
        Object output = table.odeber("T");
        assertNull(output);
        
        assertExpected(className, new String[]{
            "A1", "B1", "C1"
        });
    }
    
    @Test
    public void testOdeber_03() throws KolekceException {
        String className = getClass().getName();
        
        table.vloz("A", "A1");
        table.vloz("B", "B1");
        table.vloz("C", "C1");
        
        Object output = table.odeber("A");
        assertEquals("A1", output);
        
        Object output_2 = table.odeber("C");
        assertEquals("C1", output_2);
        
        Object output_3 = table.odeber("B");
        assertEquals("B1", output_3);
        
        Object output_4 = table.odeber("B");
        assertNull(output_4);
        
        
    }

    /**
     * Test of vytvorIterator method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     */
    @Test
    public void testVytvorIterator_Breath() throws KolekceException {
        String className = getClass().getName();
        table.vloz("C", "C1");
        table.vloz("F", "F1");
        table.vloz("D", "D1");
        table.vloz("E", "E1");
        table.vloz("A", "A1");
        table.vloz("B", "B1");

        assertExpected(getClass().getName(),
                new String[]{"C1", "A1", "F1", "B1", "D1", "E1"});

    }

    /**
     * Test of vytvorIterator method, of class AbstrTable.
     *
     * @throws kolekce.KolekceException
     * 
     *          C
     *       A       F
     *         B D
     *              E
     */         
    @Test
    public void testVytvorIterator_Depth() throws KolekceException {
        String className = getClass().getName();
        table.vloz("C", "C1");
        table.vloz("F", "F1");
        table.vloz("D", "D1");
        table.vloz("E", "E1");
        table.vloz("A", "A1");
        table.vloz("B", "B1");

        assertExpected(getClass().getName(),
                new String[]{"C1", "A1", "F1", "B1", "D1", "E1"});
        
        Iterator iterator = table.vytvorIterator(eTypProhl.HLOUBKA);
        
        String[] expected = new String[]{
          "C1", "A1", "B1", "F1", "D1", "E1"  
        };
        for (String string : expected) {
            assertEquals(string, iterator.next());
        }

    }

}
